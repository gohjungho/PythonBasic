81. Is it mandatory to import java.lang package every time? 
기본이 되는 패키지이므로 따로 import할 필요가 없다. 


82. Can you import same package or class twice in your class?
할 수는 있으나 하나로 인식한다. 불필요한 중복은 피하는 게 제일 좋다. 


83. What is a static import in Java? 
static import는 일반적인 import와는 다르게 메소드나 변수를 
패키지, 클래스명 없이 접근 가능하게 해준다. 


84. What is the difference between import static com.test.Fooclass and 
import com.test.Fooclass? 
import를 사용해 특정 패키지, 클래스, 인터페이스를 가져올 수 있다. 
import를 사용할 때마다 정확한 이름을 사용할 필요가 없고 이름을 직접 입력할 수 있다. 
static import를 사용하면 특정 클래스 및 패키지에서 static 멤버를 가져올 수 있다. 
static import를 사용할 때마다 클래스 이름을 사용해 static 멤버에 접근할 필요가 없고 직접 사용할 수 있다. 


85. What is Locale in Java? 
국가, 지역의 특징을 담고 있는 클래스. 국가명, 언어 등 


86. How will you use a specific Locale in Java? 
인스턴스화하는 방법과 미리 정의된 필드값을 사용하는 방법이 있다. 


87. What is the serialization? 
자바 시스템 내부에서 사용되는 object 또는 데이터를 외부의 자바 시스템에서도 
사용할 수 있도록 바이트 형태로 데이터를 변환하는 기술. 
JVM의 메모리에 상주하고 있는 객체 데이터를 바이트 형태로 변환하는 기술 


88. What is the purpose of serialization? 
복잡한 데이터 구조의 클래스의 객체라도 직렬화의 기본 조건만 지키면 큰 작업 없이 
바로 직렬화가 가능하다. 데이터 타입이 자동으로 맞춰지기 때문에 관련 부분에 큰 신경을 쓸 필요 없다. 


89. What is Deserialization? 
바이트로 변환된 데이터를 원래대로 object나 데이터로 변환하는 기술. 
직렬화된 바이트 형태의 데이터를 객체로 변환해 JVM에 상주시키는 형태. 


90. What is Serialization and Deserialization conceptually? 
직렬화는 객체나 데이터를 스트림(stream)으로 만드는 것을 의미한다. 
스트림이란 일반적으로 데이터, 패킷, 비트 등의 일련의 연속성을 갖는 흐름을 뜻한다.
즉, 정리정돈되어 있지 않은 객체를 일직선 통로로 들어가게 만들어 줄을 세우는 것과 같다. 


ALGORITHM (#30) 
가장 긴 공통 부분 문자열(Longest Common Subsequence)이란 
A, B 두 문자열이 주어졌을 때 두 열에 공통으로 들어있는 요소로 만들 수 있는 
가장 긴 부분 열을 말합니다. 여기서 부분 열이란 다른 문자열에서 몇몇의 
문자가 빠져 있어도 순서가 바뀌지 않은 열을 말합니다. 

예를 들어서 
S1 = ['T','H','E','S','T','R','I','N','G','S'] S2 = ['T','H','I','S','I','S']라는 두 문자열이 
있을 때 둘 사이의 부분 공통 문자열의 길이는 ['T','H','S','T','I','S']의 6개가 됩니다. 

이처럼 두 문자열이 주어지면 긴 부분 공통 문자열의 길이를 반환하는 프로그램을 만들어주세요. 

두 개의 문자열이 한 줄에 하나씩 주어집니다. 
문자열은 알파벳 대문자로만 구성되며 그 길이는 100글자가 넘어가지 않습니다. 

출력은 이 두 문자열의 가장 긴 부분 공통 문자열의 길이를 반환하면 됩니다. 


def common(a, b): # 문자열 두 개 입력 
    a = a.upper() # 전부 대문자로 변환  
    b = b.upper()
    s1 = [] # 쪼갠 값을 담을 빈 리스트 
    s2 = []
    
    for i in range(len(a)): s1.append(a[i]) # 문자열 쪼개기 
    for i in range(len(b)): s2.append(b[i])
        
    if len(s1) < len(s2): # 문자열 길이가 긴 것을 짧은 것에 대조하기 위함 
        s1, s2 = s2, s1
        
    result = [] # 공통되는 값을 담을 변수 
    
    for i in range(len(s1)): # s1의 길이만큼 반복 
        # 만약 s1의 값이 s2에 있으면. 공통된 문자열이므로 짧은 문장의 길이가 최대
        if s1[i] in s2 and (len(result) < len(s1) and len(result) < len(s2)): 
            result.append(s1[i]) # result에 s1[i] 값 저장 

    return len(result) # 반환. len을 풀고 값을 찍어 확인해 보자. 

s1 = 'thisisstrings' # 'thestrings' / 'thisisstrings'
s2 = 'thisis' # 'thisis' / 'tathisiskkqqaew' 'kiothiskessiskkqqaew'

common(s1, s2) # 보기와 testcase 1만 성공 / testcase 2는 10, 3은 9 출력... 