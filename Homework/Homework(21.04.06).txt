5. How Java platform is different from other platforms? 
가장 기본이되는 언어인 C와 비교해 본다면 
C는 운영체제 또는 하드웨어 등의 시스템 프로그래밍이 가능하고 
특정한 컴파일러에 구애받지 않을 만큼 이식성이 높으며
C로 짜여진 코드는 속도가 빠르고 가볍고 절차지향 프로그래밍 언어이다. 
반면 Java는 JVM 안에서 실행되기에 운영체제를 가리지 않지만 C와 같이 운영체제 바로 위에서 바로 실행하지는 못한다.
그리고 C와는 다르게 객체지향 프로그래밍 언어로 보다 큰 프로그램 제작에 유용하다. 
또한 무료 라이브러리의 수가 매우 많다. 

Answer: 
Java is a platform independent language. 
Java compiler converts Java code in to byte code that can be interpreted by JVM. 
There are JVM written for almost all the popular platforms in the world. 

Java byte code can run on any supported platform in same way. 
Where as other language require libraries compiled for a specific platform to run. 

6. Why people say that Java is 'write once and run anywhere' language?
Java가 어떤 장비에서도 개발될 수 있고, 표준 바이트코드로 컴파일되며, JVM이 설치된 어떤 장비에서도 실행될 수 있기 때문이다.

Answer: 
You can write Java code on Windows and compile it in Windows platform. 
The class and jar files that you get from Windows platform can run as it is on Unix environment. 
So it is a truly platform independent language. 

Behind all this portability is Java byte code. 
Byte code generated by Java compiler can be interpreted by any JVM. 
So it becomes much easier to write programs in Java and expect those to run on any platform. 

Java compiler javac compiles java code and JVM java runs that code. 

7. How does ClassLoader work in Java?
JRE의 한 부분인 ClassLoader는 Java로 제작한 Class들을 JVM으로 로딩하는 역할을 한다.
JVM은 클래스로더로 인해 파일의 구조나 파일 시스템을 고려하지 않고 자바 프로그램을 구동시킬 수 있다. 

Answer: 
In Java, ClassLoader is a class that is used to load files in JVM. 
ClassLoader loads files from their physical file locations e.g. Filesystem, Network location etc. 

There are three main types of ClassLoaders in Java. 
1. Bootstrap ClassLoader: This is the first ClassLoader. It loads classes from rt.jar file. 
2. Extension ClassLoader: It loads class files from jre/lib/ext location. 
3. Application ClassLoader: This ClassLoader depends on CLASSPATH to find the location of class files. 
If you specify your jars in CLASSPATH, then this ClassLoader will load them.

8. Do you think 'main' used for main method is a keyword in Java? 
main은 하나의 메소드로 Java로 만들어진 소스는 무조건 main메소드에서부터 시작한다.
만약 main이 존재하지 않으면 프로그램이 실행점을 찾을 수 없어 동작하지 않을 것이다. 

Answer: 
No, main is just a name of method. 
There can be multiple methods with same name main in a class file. 
It is not a keyword in Java. 


ALGORITHM HOMEWORK(#21)
1차원의 점들이 주어졌을 때, 그 중 가장 거리가 짧은 것의 쌍을 출력하는
함수를 작성하시오.
(단 점들의 배열은 모두 정렬되어 있다고 가정한다.)
S=[1, 3, 4, 8, 13, 17, 20]
(3, 4)
# 모든 코드 라인마다 주석 첨부

Answer: 

def A_Pair(array): # 함수 만들기 
    m = S[0] # 작은 수가 들어갈 변수
    n = S[1] # 큰 수가 들어갈 변수
    k = n - m # 두 값의 차이를 저장 
    i = 1 # 인덱스 값
    while i < len(array): # 리스트의 길이만큼 반복
        if array[i] - array[i - 1] < k: # 인접한 두 수의 차가 앞선 값보다 작으면 
            m = array[i - 1] # 기존의 값을 대체(작은 수)
            n = array[i] # 기존의 값을 대체(큰 수)
        i += 1 # 인덱스 + 1 증가 
    return m, n # m과 n 반환 


S = [1, 3, 4, 8, 13, 17, 20] # 주어진 리스트 
A_Pair(S) # 튜플로 반환 