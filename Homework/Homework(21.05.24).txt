221. How will you create an empty Map in Java? 
A:
There are two ways to create an empty Map in Java. 
1. Immutable: If we want an immutable empty Map, we can use following code: 
myMap = Collections.emptyMap(); 

2. Any map: For all other scenarios, we can use following code by using new method: 
myMap = new HashMap(); 

자바에서 빈 map을 만드는 방법은 두 가지가 있다. 
1. Immutable(불변성): 불변한 빈 map을 원한다면, 다음과 같은 코드를 사용할 수 있다. 
myMap = Collections.emptyMap() 
2. 모든 map: 다른 모든 시나리오에서는 새로운 방법을 사용하여 다음 코드를 사용할 수 있다. 
myMap = new HashMap() 


222. What is the difference between remove() method of Collection and 
remove() method of Iterator? 
A: 
In Collection interface remove(Object o) method is used to remove objects from a Collection. 
List interface also provides remove(int index) method to remove an object at a specific index. 
These methods are used to remove an entry from Collection, while no thread is iterating over it. 
When we are iterating over a Collection, then we have to remove() method of Iterator. This method removes current element from Iterator's point of view. If we use remove(o method of Collection or List), then we will get ConcurrentModificationException.
Therefore, it is recommended to use remove() method of Iterator during the traversal of a Collection by an Iterator. 

Collection 인터페이스에서 객체 remove(Object o) 메서드는 컬렉션에서 객체를 제거하는데 사용한다. 
List 인터페이스는 특정 인덱스에서 객체를 제거하는 remove(int index)하는 방법도 있다. 
이러한 메서드는 스레드가 반복되지 않는 동안 컬렉션에서 항목을 제거하는데 사용된다. 
컬렉션 위에서 반복할 때는 이터레이터 메서드를 제거해야 한다. 이 메서드는 이터레이터 관점에서의 현재 요소들을 제거한다. remove(콜렉션 또는 리스트의 메서드 없음)를 사용하면 Concurrent Modification이 된다. 
따라서 이터레이터에 의한 컬렉션 트래버설 중에는 이터레이터를 지우는 방법을 사용하는 것이 좋다. 


223. Between an Array and ArrayList, which one is the preferred collection 
for storing objects? 
A: 
An ArrayList is backed up by array internally. There are many usability advantages of using an ArrayList over an array in Java. 
Array has a fixed length at the time of creation. Once it is created we cannot change its length. 
ArrayList is dynamic in size. Once it reaches a threshold, it automatically allocates a new array and copies contents of old array to new array. 
Also ArrayList provides support of Generics. But Array does not support Generics. 

ArrayList는 내부적으로 Array에 의해 백업된다. 자바의 배열에 비해 ArrayList를 사용하면 많은 사용적합성에 이점이 있다. 
배열은 만들 때 고정된 길이를 가지는데 일단 그것이 만들어지면 우리는 그것의 길이를 변경할 수 없다. 
배열 목록의 크기는 동적이다. 임계값에 도달하면 자동으로 새 배열을 할당하고 이전 배열의 내용을 새 배열에 복사한다. 
또한 ArrayList는 Generics를 지원한다. 그러나 배열은 제네릭을 지원하지 않는다. 


224. Is it possible to replace Hashtable with ConcurrentHashMap in Java? 
A: 
Yes, a ConcurrentHashMap can be replaced with Hashtable in Java. 
But it requires careful observation, since locking behavior of Hashtable is different than that of ConcurrentHashMap.
A Hashtable locks whole Map instead of a portion of Map. 
Compound operations like if(Hashtable.get(key) == null) put(ket, value) work in Hashtable but not in ConcurrentHashMap. 
In a ConcurrentHashMap we use putIfAbsent() method for such a scenario. 

할 수 있다. 자바에서 ConcurrentHashMap을 해시테이블로 바꿀 수 있다. 
하지만 해시테이블의 로킹 동작이 ConcurrentHashMap과 다르기 때문에 주의해야 한다. 
해시테이블은 맵의 일부가 아닌 전체를 로킹한다. 
if(Hashtable.get(key) == null) put(flotes, value)과 같은 복합 작업은 해시 테이블에서 작동하지만 ConcurrentHashMap에서는 작동하지 않는다.
ConcurrentHashMap에서는 그러한 경우에 putIfAbsent() 메서드를 사용한다. 

225. How CopyOnWriteArrayList class is different from ArrayList and Vector classes? 
A:
CopyOnWriteArrayList was introduced in Java 1.5. It implements List interface. 
It provides better concurrent access methods than a Synchronized List. 
In CopyOnWriteList, concurrency is achieved by copying ArrayList over each write and replace with original instead of locking. 

CopyOnWriteArrayList는 자바 1.5버전에 도입되었다. List 인터페이스를 구현한다. 
동기화된 리스트보다 더 나은 동시 접근방법을 제공한다. 
CopyOnWriteList에서 동시성은 ArrayList를 복사하여 로킹 대신 원본으로 대체한다. 


ALGORITHM HOMEWORK (#276)


class Solution():
    def fence(self, n, k):
        try:
            if n == 0 or k <= 0: # n과 k 둘 중 하나가 0인 경우 예외처리
                 return 0
                
            mem = [0] * (n + 1) # '[0]'이 (n + 1)개 만큼 반복. 즉, 리스트의 길이를 설정
            mem[0] = k # 울타리가 1, 2개인 경우. 규칙성을 따르지 않음 
            mem[1] = k * k  

            for i in range(2, n): # 울타리가 3개 이상부터 규칙성을 가짐 
                mem[i] = (k - 1) * (mem[i - 1] + mem[i - 2])
            return mem[n - 1]
        
        except IndexError: # 인덱스가 범위를 벗어나면 실행  
            print("n의 값이 잘못되었습니다.") # 울타리 개수는 항상 양수
#         except ~Error: # 페인트 종류가 0 미만 개일 경우 예외처리... 
#             # 어떻게 줘야할지 모르겠네요.... 
            
n = int(input("n: "))
k = int(input("k: "))
s = Solution()
s.fence(n, k)