33. Why it is not a good practice to create static variables in Java? 
A: 
Static variables are common to all the objects of a class. If a new object is created, there is no need to test the value of static variable.

Any code that uses static variable can be in any state. It can be within a new object or at a class level. So the scope of static variable is open ended in a Java class.

If we want tighter control on scope, then variables should be created at the object creation level. 

Also defining static variables is not a good practice because they go against the principles of Object Oriented Programming.

정적 변수는 클래스의 모든 개체에 공통적입니다. 새 개체가 생성되면 정적 변수의 값을 테스트할 필요가 없습니다.

정적 변수를 사용하는 코드는 모든 상태에 있을 수 있습니다. 새 개체 내에 있거나 클래스 수준에 있을 수 있습니다. 따라서 정적 변수의 범위는 Java 클래스에서 열립니다.

범위를 더 엄격하게 제어하려면 개체 생성 수준에서 변수를 만들어야 합니다.

또한 정적 변수를 정의하는 것은 객체 지향 프로그래밍의 원칙에 어긋나기 때문에 좋은 관행이 아니다.


34. What is the purpose of static method in Java? 
A:
Java provides the feature of static method to create behavior at the class level. The static method is common to all the objects of a class. We do not need to create any object of a class to call a static method. So it provides convenience of not creating an object for calling it. 

Also a static method can access and modify static data members. 

This also helps in keeping the behavior as well as state at the class level. 

Java는 클래스 수준에서 동작을 만드는 정적 메서드의 기능을 제공합니다. 정적 메서드는 클래스의 모든 개체에 공통입니다. 정적 메서드를 호출하기 위해 클래스의 개체를 만들 필요가 없습니다. 따라서 호출할 개체를 만들지 않는 편리함을 제공합니다.

또한 정적 메소드는 정적 데이터 멤버에 액세스하고 수정할 수 있습니다.

이것은 또한 수업 수준에서 진술뿐만 아니라 행동을 유지하는 데에도 도움이 된다.


35. Why do we mark main method as static in Java? 
A:
The main method in Java is marked as static, so that JVM can call it to start the program. If main method is not static, then which constructor will be called by Java process?

As such it is a known as convention to mark main method static in Java. But if we remove the static, then there will be ambiguity. Java process may not know which method of a class to call to start the program. 

So this convention helps in Java process to identify the starting code for a program in class that is passed as an argument to java process.

JVM이 프로그램을 시작하기 위해 호출할 수 있도록 Java의 주요 메서드는 정적(static)으로 표시됩니다. 메인 메소드가 정적이 아닌 경우, Java 프로세스에 의해 호출되는 생성자는 무엇입니까?

따라서 자바에서 주 메서드를 정적(static)으로 표시하는 것이 관습으로 알려져 있다. 하지만 우리가 정적을 제거하면, 모호함이 생길 것이다. Java 프로세스는 프로그램을 시작하기 위해 호출할 클래스의 메소드를 모를 수 있습니다.

따라서 이 규약은 자바 프로세스에서 자바 프로세스에 인수로 전달되는 클래스 내 프로그램의 시작 코드를 식별하는 데 도움이 된다.


36. In what scenario do we use a static block? 
A:
At times, there is a class that has static member variables. These variables need some complicated initialization. At this time static block helps as a tool to initialize complex static member variable initialization.

The static block is executed even before the execution of main. 

Sometimes, we can also replace static block with a static method of class.

정적 멤버 변수가 있는 클래스가 있는 경우도 있습니다. 이 변수들은 복잡한 초기화가 필요하다. 이때 정적 블록은 복잡한 정적 멤버 변수 초기화를 초기화하는 도구로서 도움이 된다.

정적 블록은 주 블록이 실행되기도 전에 실행됩니다.

때로는 정적 블록을 정적 클래스 방법으로 대체할 수도 있습니다.


ALGORITHM QUIZ (#28)

광장에서 모인 사람들과 악수를 하는 행사가 열렸다. 
참가자인 민규는 몇 명의 사람들과 악수를 한 후 중간에 일이 생겨 집으로 갔다. 
이 행사에서 진행된 악수는 총 n번이라고 했을 때. 
민규는 몇 번의 악수를 하고 집으로 돌아갔을까? 
이때 민규를 포함한 행사 참가자는 몇 명일까? 

- 악수는 모두 1:1로 진행이 된다. 
- 민규를 제외한 모든 참가자는 자신을 제외한 참가자와 모두 한 번씩 악수를 한다. 
- 같은 상대와 중복된 악수는 카운트 하지 않는다. 
- 민규를 제외한 참가자는 행사를 모두 마쳤다. 

설명) 
59회의 악수가 행사에서 진행되었다. 
이때 민규는 4번의 악수를 하였고 민규를 포함한 참가자는 12명이다. 


class Event(): # 클래스. self는 사용하지 않으므로 굳이 만들지 않음...
    def handshake(a, n): # 함수. (내가 악수한 횟수, 총 인원)
        s = 0 # 총 횟수 
        try: # 굳이 넣을 필요 없음... 
            while n > 0: # 총 인원이 0이 되기 전까지 반복 
                n -= 1 # 자기 자신과는 악수를 할 수 없으므로 -1 
                if a < n: # 민규가 도중에 탈출했으므로 
                    s += n - 1 # 총 인원 -1 
                else: # 탈출하기 전까지는 
                    s += n # 정상적으로 진행 
        except: 
            return s # 행사에서 진행된 악수의 총 횟수 반환 

handshake(4, 12) # handshake(민규가 악수한 횟수, 행사 참가 총 인원)
# 59


class Event2():
    def handshake2(s): # 함수. (악수 총 횟수)
        a = 0 # 민규가 악수한 횟수 
        n = 0 # 총 인원 
        t = 0 # 총 횟수와 같은지 비교하기 위한 임시 변수 
        try: # 굳이 넣을 필요 없음... 
            while t != s: # 임시변수 t가 s와 같지 않으면 반복
                t = (n - 1) * n / 2 # 삼각수 공식 활용. n * (n+1) / 2
                # 자기 자신과는 악수할 수 없으므로 n-1로 시작 
                if s < t: # 민규가 도중에 탈출했으므로 
                    break
                n += 1
            a = n - (t - s) - 1
        except: 
            return [a, n] # 민규의 악수 횟수, 총 인원 반환  

handshake2(59) # handshake(행사에서 진행된 악수의 총 횟수)
# [4, 12]