25. In OOPS, what is meant by composition? 
OOP란, Object-Oriented Programming의 약자로 객체지향 프로그래밍을 말한다. 
컴포지션은 객체 지향 프로그래밍의 기본 개념 중 하나이다. 
이는 인스턴스 변수에서 하나 이상의 다른 클래스 개체를 참조하는 것을 말한다. 
소프트웨어를 구성하는 데에도 사용되는데 이를 사용하면 다음과 같은 이점을 얻을 수 있다. 

1. 기존 코드를 재사용한다. 
2. 깨끗한 디자인의 API를 얻을 수 있다. 
3. 외부 요인에 영향을 받지 않고 컴포지션에 사용되는 클래스의 구현을 변경하기에 수월하다. 


26. How aggregation and composition are different concepts? 
어그리게이션과 컴포지션은 두 클래스 사이의 관계를 나타내기 위해 사용되는 유형의 연결이라 할 수 있다. 
집합에서 상위 및 하위 엔티티는 관계를 유지하면서도 둘다 독립적으로 존재할 수 있다. 즉, 부모와 자식의 실체를 독립적으로 사용할 수 있다. 
컴포지션에서 상위 엔티티는 하위 엔티티를 소유하므로 사위 엔티티 없이 소유할 수 있으므로 상위 엔티티 없이 하위 엔티티가 존재할 수 없다. 
그래서 우리는 직접 또는 독립적으로 하위 엔티티에 엑서스할 수 없다. 


27. Why there are no pointers in Java? 
자바에 포인터가 없는 이유는 프로그래머가 실수할 일이 없게 사전에 차단하기 때문이다. 자바에 포인터가 없는 대신 참조가 있다.

프로그램을 만들게 되면 메모리 영역이 필요한데 이를 스택 영역, 힙 영역, 메소드 영역, 이렇게 크게 3곳으로 나누어 관리를 하게된다. 
이때 객체는 힙 영역에서 생성되는데 Ver ver = new Ver(); 에서 ver에 객체의 참조값이 들어간다. 
결론적으로 자바에서 그 객체가 메모리상의 어디에 존재하는지 주소(포인터)는 알 수 없지만 객체를 찾아갈 수 있는 방법(참조)는 알 수 있다는 것이다. 


28. If there are no pointers in Java, then why do we get NullPointerException? 
null의 의미가 모호하여 다양한 에러가 발생하는데 쉽게 말해서 'null 때문에 발생하는 runtime error'이다. 
여기에서 포인터는 C에서의 의미와 다르게 참조값을 말한다. 즉 참조하는 값이 적절하지 않을 때 종종 볼 수 있다. 
이외에도 발생 원인이 매우 다양하여 에러 발생 이후 디버깅이 매우 어렵기에 미리 발견하고 수정하는 것도 좋지만, 처음부터 일어나지 않도록 예방하는 것이 무엇보다 중요하다. 




ALGORITHM HOMEWORK(#28)

아마존 면접문제 
다음과 같은 형태의 배열을 
[a1,a2,a3...,an,b1,b2...bn]  > a = ["a1","a2"..."an","b1","b2","bn"]
다음과 같은 형태로 바꾸시오
[a1,b1,a2,b2.....an,bn] > output: ['a1','b1','a2','b2', ... 'an','bn' ]


# 임시 리스트 사용 
def string_sort(arr):
    tmp = [] # 임시 리스트 생성 
    for i in range(len(arr)): # 입력받은 리스트의 길이 만큼 반복 
        tmp.append(arr[0][1] + arr[0][0]) # 문자와 숫자 자리 바꾸기 
        arr.pop(0) # 맨 앞자리 추출 
        tmp.sort() # 오름차순 정렬 

    for i in range(len(tmp)): # arr의 값이 tmp으로 이동했으므로 
        arr.append(tmp[0][1] + tmp[0][0]) # 문자와 숫자 제자리로 원위치
        tmp.pop(0) # 맨 앞자리 추출
        # tmp에서 arr로 모든 값 이동 

    return arr # 정렬이 완료된 arr 반환 

a = ["a1","a2","a3","a4","an","b1","b2","bn"]
string_sort(a) # 결과를 확인해봅시다.


# 람다 사용. 매우 간결.... 
def string_sort(array):
    return sorted(array, key=lambda array:array[-1])
    
a = ["a1","a2","a3","a4","an","b1","b2","bn"]
string_sort(a)